{"cells": [{"check": "def _Check(scope, output):\n    if output == 'Finished':\n        return True, 'Congratulations. \ud83c\udf89'\n    if 'a' in scope.keys():\n        return False, f\"The variable a exists and has the value {scope['a']}.\"\n    if 'b' in scope.keys():\n        if scope['b'] == 5:\n            return False, 'b exists and equals 5.'\n        elif scope['b'] == 10:\n            return False, 'Yept. b exists and equals 10.'\n        else:\n            return False, f'b exists and has some other value. Let me guess: {scope[\"b\"]}.'\n    if 'Traceback' in output:\n        return False, 'This is how an exception looks like.'\n    return False, \"I'm out of ideas. Something happened that wasn't checked for.\"", "code": "a = True", "id": 2, "output": "", "response": {"display": "none", ""}, "text": "The logic that checks the results of each code cell is individually defined in the `editor.py`.\nYou can do pretty much anything that is allowed in python.\nThe check function always has the following form and should be written correctly; if there is an exception, this Notebook will break.\nIt is meant to be used easily by anyone without wondering about the hidden details, so if there is some error in the backend checking function, there is no plan B.\n\n```python\ndef _Check(scope: dict[str, Any], output: str) -> Tuple[Bool, str]:\n    \"\"\"Check the scope and the output of the cell for the given task.\n    The scope has the names of all variables as well as their value.\n    The output is whatever went to the output, stdout as well as stderr.\n    After doing some task specific checking, the function should return\n    whether the cell passes the task (True, False) and then a message\n    that will be printed.\n\n    Args:\n        scope (dict[str, Any]): The scope of the cell. E.g., a = 2 -> scope['a'] = 2.\n        output (str): The output of the string including Tracebacks or print results.\n\n    Returns:\n        Tuple[Bool, str]: Whether the cell passed and the message that will be printed accordingly.\n    \"\"\"\n    return True, \"\"\n```\n\nFor example, you can check for the existence of a variable in scope or for the value of this variable and respond individually to it.\nLet's see this in action by trying one of the following:\n\n1. Create a variable called `a`.\n2. Create a variable such as `b = 5`.\n3. Create a variable such as `b = 10`.\n4. Create a variable such as `b = 'hi'`.\n5. Raise an exception such as `raise Exception('Breaking stuff')`.\n6. Forget a bracket such as `print('This works'`.\n\n\nPass this cell and then the complete `Demo` by printing `Finished` and nothing else.\n\n", "title": "Check"}, {"check": "def _Check(scope, output):\n    if 'Hello from the global function.' in output:\n        return True, 'And here is a message that was written in the editor.py file.'\n    return False, 'You should just call the global function `f`'", "code": "f()", "id": 0, "output": "", "response": {"display": "none", "message": ""}, "text": "## The Start\n\nIn this box you can describe the task with all the markdown you have.\nIn short, everything that [showdown](https://showdownjs.com/) supports.\n\nRun the code cell below by pressing the `Run` button on the right of this cell or by hitting `Ctrl+Enter`.\n\nNote, that the function in the code field is defined in the global code window on the right and is therefore available in all following code cells.\n", "title": "Introduction"}, {"check": "def _Check(scope, output):\n    if 'Hello, World!' in output:\n        return True, 'See. Simple.'\n    return False, \"Whatever you did... You didn't print 'Hello, World!'\"", "code": "print('Hello, World!')", "id": 1, "text": "## Markdown\n\nAlso, progress will be saved.\nSo try closing this tab, stop the server and restart it.\n\n### Really, Markdown\n\n#### Still Markdown\n\nHere are some markdown example.\n\nFor example **bold** or *italic*.\n\n> A separate quote is also nice.\n\nOr some `inline` code such as `a = 5`.\n\nOr maybe some larger code block \n\n```\ndef f():\n    return 5\n```\n\nOr a table\n\n| Left column | Center column | Right column |\n| --- | :---: | ---: |\n| a | b | c |\n\nPrint `Hello, World!` to pass this cell.", "title": "Markdown"}], "title": "Demo", "global-code": "# Write global code here\ndef f():\n    print('Hello from the global function.')", "passed": 0, "response": {"display": "none", "message": ""}}