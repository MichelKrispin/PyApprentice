cells:
- check: |-
    def _Check(scope, output):
      if 'a' in scope.keys():
        if scope['a'] == 5:
          return True, 'Easy, right?'
        else:
          return False, 'a exists, but it does not equal 5.'
      elif 'Traceback' in output:
        return False, 'This is how an exception looks like.'
      else:
        return False, 'There is not even the variable a.'
  code: a = 5
  id: 0
  output: ''
  response:
    display: success
    message: Easy, right?
  text: |-
    ## This is the next chapter.

    Maybe a small description or explanation.

    And then, try to set `a` to `5`. But first test what happens if the code raises an exception or if its not `5`. Or if there is no `a` at all.
  title: Next Exercise
- check: |
    def _Check(scope, output):
      return 'a' in scope.keys()
  code: 'a =

    '
  id: 1
  output: ''
  response:
    display: none
    message: ''
  text: |
    Yes.
    Do something
  title: Ex 2
- check: |
    def _Check(scope, output):
      return 'True' in output
  code: |
    a = 0
    print(b == )
  id: 2
  output: ''
  response:
    display: none
    message: ''
  text: |
    You should really do something.
    Or not.
  title: Ex 3
global-code: |-
  # Write global code here
  def something():
      print('Hello World')
passed: 1
title: Demo
