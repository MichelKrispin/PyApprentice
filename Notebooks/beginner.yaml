cells:
- check: " \ndef _Check(scope, output):\n    if \"\" in output:\n        return True,\
    \ 'Wundervoll.'\n    elif 'Traceback' in output:\n        return False, 'Exception'\n\
    \    else:\n        return False, 'Und so sieht es aus, wenn es noch nicht ganz\
    \ richtig ist.'"
  code: |2-

    # Python Code
    print('Hello')
  id: 0
  output: 'Traceback (most recent call last):<br>&nbsp;&nbsp;File &quot;Hello World&quot;,
    line 2<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;^<br>SyntaxError:
    unexpected EOF while parsing<br>'
  response:
    display: danger
    message: "Naja. Wenigstens wei\xDFt Du jetzt wie eine Fehlermeldung aussieht"
  text: Description of current cell
  title: Kekse
- check: |
    def _Check(scope, output):
      if 'message' in scope.keys() and 'Hallo' in output:
        return True, 'Ganz sicher.'
      else:
        return False, 'Versuch es doch einfach nochmal.'
  code: |
    # Diese Zeile beschreibt nur etwas (und das nicht sehr gut...)
    # message = 'Hallo'
    # print(message)  # Hier wird wieder etwas ausgegeben
  id: 1
  output: ''
  response:
    display: none
    message: ''
  text: "Wir fangen mal klein an.\nCode wird immer Zeile f\xFCr Zeile geschrieben\
    \ und in Python muss\njede Zeile korrekt einger\xFCckt werden (also im MOment\
    \ noch ganz links anfangen)\nWenn vor einer Zeile ein `#` steht, dann ist diese\
    \ Zeile auskommentiert und wird ignoriert.\n\nMache aus den richtigen Zeilen wieder\
    \ Code, der nicht als Kommentar interpretiert wird,\nindem die \xB4#\xB4 an den\
    \ richtigen Stellen entfernt werden\n(und dann auch die Leerzeichen direkt dahinter;\
    \ Stichwort ganz links anfangen).\n"
  title: Kommentare
- check: |
    def _Check(scope, output):
      if 'mitesser' in scope.keys() and scope['mitesser'] == 5:
        return True, 'Locker flockig.'
      else:
        return False, 'Nicht so wirklich...'
  code: |
    lieblings_restaurant = 'Burger Donalds'  # Name vom Restaurant
    burger_donalds = RestaurantBesuch(lieblings_restaurant)
    burger_donalds.gericht(10)  # Kosten vom ersten Gericht (10)
    burger_donalds.gericht(15)  # Kosten vom zweiten
    burger_donalds.gericht(8)   # Kosten vom dritte)n

    mitesser = 4  # Anzahl der Mitessenden
    gesamt_kosten(mitesser)  # Gib die Gesamtkosten aus
  id: 2
  output: ''
  response:
    display: none
    message: ''
  text: "Wir fangen mal an, indem wir einen Taschenrechner bauen,\nder das bezahlte\
    \ Restaurantgeld durch die Anzahl der Personen teilt.\nWenn ein Essen 100\u20AC\
    \ gekostet hat und 10 Leute mitgegessen haben,\ndann kostet der Spa\xDF 10\u20AC\
    \ pro Person.\n\nDas Prinzip hier ist, dass der fertige Code hier einmal steht,\n\
    das hei\xDFt, dass er \xFCberflogen werden kann, aber was das alles hei\xDFt,\n\
    schauen wir uns danach im Detail an.\n\n(Ich k\xFCndige schonmal an, dass das\
    \ Beispiel etwas... 'konstruiert' ist.\nEs wird sp\xE4ter noch aufregender, aber\
    \ hier sehen wir schonmal alle wichtigen Teile.)\n\nDaf\xFCr kopier den folgenden\
    \ Code in das rechte 'Global Functions' Fenster (und \xFCberschreib alles andere\
    \ darin).\n```py\nclass RestaurantBesuch:\n    def __init__(self, restaurant_name,\
    \ max_besucher=15):\n        self.restaurant_name = restaurant_name\n        self.max_besucher\
    \ = max_besucher\n        self.kosten = 0.0\n\n    def gericht(self, kosten):\n\
    \        self.kosten += kosten\n\n    def gesamt_kosten(self, anzahl_besucher):\n\
    \        if anzahl_besucher > self.max_besucher:\n            raise Exception('So\
    \ viele Leute sind nicht gut f\xFCr die Geldb\xF6rse')\n        return self.kosten\
    \ / anzahl_besucher\n\ndef gesamt_kosten(restaurant_besuch, anzahl_besucher):\n\
    \    print(f'Die Gesamtkosten im {restaurant_besuch.restaurant_name} '\n     \
    \     f'betragen {restaurant_besuch.gesamt_kosten(anzahl_besucher):.2f}\u20AC\
    ')\n```\n\nInsgesamt ist es wohl sehr hilfreich mal an den einzelnen Werten (unter\
    \ dem `---` Kommentar) herumzuspielen.\nAlso den Name vom Restaurant mal \xE4\
    ndern, oder die Preise der einzelnen Gerichte.\nUm hier weiterzukommen, m\xFC\
    ssen 5 Leute mitessen.\n"
  title: Motivation
- check: " \ndef _Check(scope, output):\n    if \"\" in output:\n        return True,\
    \ 'Wundervoll.'\n    elif 'Traceback' in output:\n        return False, 'Exception'\n\
    \    else:\n        return False, 'Und so sieht es aus, wenn es noch nicht ganz\
    \ richtig ist.'"
  code: |2-

    # Python Code
    print('Hello')
  id: 3
  output: ''
  response:
    display: none
    message: ''
  text: Description of current cell
  title: Kekse
global-code: '# Hier kommen globale Funktionen rein'
passed: 0
title: Starterpack
