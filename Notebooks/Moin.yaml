cells:
- check: |-
    def _Check(scope, output):
      if 'Moin' in output:
        return True, 'Aufregend!'
      elif 'Traceback' in output:
        return False, 'So sieht ein Python Fehler aus.'
      else:
        return False, 'Und jetzt brauchen wir noch Moin.'
  code: print('Hallo'
  id: 0
  output: ''
  response:
    display: none
    message: ''
  text: "Also das ist so.\nOben rechts auf `Run` dr\xFCcken f\xFChrt den Code hier\
    \ drunter aus.\n\nAber wie wir wissen: Rot ist tot.\n\nAlso sollte da eine Klammer\
    \ noch hin.\n\nUnd dann w\xFCrden wir gerne `Moin` ausgeben und nicht `Hallo`."
  title: Huhu
- check: "def _Check(scope, output):\n  if 'schwabbel' in scope.keys() and scope['schwabbel']\
    \ == 152 and 'Waffeleisen' in output:\n    return True, 'War ja doch etwas zu\
    \ einfach...'\n  elif 'Traceback' in output:\n    return False, 'Neee. Nichts\
    \ kaputt machen.'\n  else:\n    return False, 'N\xE4h.'"
  code: "schwabbel = \nprint()"
  id: 1
  output: ''
  response:
    display: none
    message: ''
  text: |-
    Jetzt probieren wir mal etwas Aufregenderes.

    Die Variable `schwabbel` muss den Wert `152` haben. Und dann muss noch `Waffeleisen` ausgegeben werden.
  title: Neue Runde
- check: "def _Check(scope, output):\n  if 'Traceback' in output:\n    return False,\
    \ 'Nenenene.'\n  if 'x_1' in scope.keys() and 'x_1' in scope.keys():\n    if ('f'\
    \ in scope.keys() and\n        scope['f'](scope['x_1']) == scope['f'](scope['x_2'])\
    \ and \n        scope['f'](scope['x_1']) == 0 and\n        '0' in output):\n \
    \     return True, 'Herzlichen Gl\xFChstrumpf. Das wars auch schon.'\n    if '0\\\
    n' == output:\n      return False, 'He. Mogeln gilt nicht.'\n    if 'f' not in\
    \ scope.keys():\n      return False, 'Sicher, dass der Code r\xFCberkopiert wurde?'\n\
    \    else:\n      return False, 'Jetzt brauchen wir nur noch die richtigen Nullstellen.'\n\
    \  return False, 'Also x_1 und x_2 muss es schon geben.'"
  code: "x_1 = \nx_2 = \nprint(f(x_1) + f(x_2))"
  id: 2
  output: ''
  response:
    display: none
    message: ''
  text: "Und um es auf die Spitze zu treiben.\n\nBitte in das 'Global Functions' Feld\
    \ rechts den folgenden Code kopieren:\n```\ndef f(x):\n  return 3*x - 2*x**2 +\
    \ 4\n```\n\nWir suchen:\n- eine Variable `x_1` mit der ersten Nullstelle von `f(x)`,\n\
    - eine Variable `x_2` mit der zweiten Nullstelle von `f(x)`,\n- nat\xFCrlich die\
    \ Ausgabe `0`."
  title: Spannung pur
global-code: '# Hier steht globaler Code'
passed: 0
title: Moin
